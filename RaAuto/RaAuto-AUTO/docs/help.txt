Some additional information:
1.	Step – is considered to be your Test Case
	1.	Dependency on Step – if your test depends on another step/test case-e.g. <dependson>HomePage<dependson>
	2.	Execution – This is the list of operations that you want to perform on various pages
		1.	Event
			a.	Following list is of options supported for attribute ”name”
				1.	Navigate – URL
				2.	Click – Button/Link
				3.	Settext – text Field – Input Data
				4.	Check/Uncheck – Check box
				5.	Select – Single Value from dropdwn – Value to be selected
				6.	Clear – Clear Text field 
				7.	Gettable – Get and print the table contents
				8.	Submit – Submit form/ Submit Button click 
				9.	browseFile – Browse to file for upload – Actual path to the file with file name
				10.	findValueInTable – Find if the value is present in the table or not. Single/ Multiple/ No occurrence of value in table. - Value to be found
				11.	PickDate – Date picker 
				12.	 rightClick - Right click on the control to get context menu.
				13. 	doubleClick - Double click on control
				14. 	searchValueInTable - Find perticular value in table
				15. 	SwitchToFrame - Switch control to the frame with specified name.
				16. 	wait - Ask system to wait for specified number of seconds.
					e.g. 
					<event name="wait" optional="false">
						<context type="" value="">20</context>
					</event>
				17. 	SwitchToWindow - Switch to window specified by the name (or in case of only one child window ChildWindow/ParentWindow as input data)
					e.g. Switch to child window 
					<event name="SwitchToWindow" optional="false">
						<context type="" value="">ChildWindow</context>
					</event>
					Switch to parent window
					<event name="SwitchToWindow" optional="false">
						<context type="" value="">ParentWindow</context>
					</event>
					Switch to  window named MyWindow
					<event name="SwitchToWindow" optional="false">
						<context type="" value="">MyWindow</context>
					</event>
				18. dragFrom: Drag an element.
				19. dropTo: Drop the dragged element to the element.
				20. dropToOffset: Drag an element and drop to the location.
					Syntax:
					<event name="dropToOffset" optional="true">
					<context type="xpath" value="id('Fav')/li[1]">400,500</context>
				</event>
				21. searchInTableAndClick :  Search for the value in table and click on specified column number in the table for the first found occurence of the value.
					ColumnNo shoud be blank if the search element itself asked to click.
					Syntax:
					<event name="searchInTableAndClick" optional="false">
					<context type="xpath" value="id('main-content')/div[2]/div/div/table/tbody/tr" columnNo="4">12/31/12</context>
				</event>
			b.	Following list is of options supported for attributes of Context  of Event– depending on what you use as identifier – Hint: use Firefox IDE, XpathChecker, 				Firebug to identify your object
				1.	”type” = Id, classname, name, cssselector, xpath, linktest, partiallinktext, tagname
				2.	”value”=your identifier value
	3.	Verification – This is what you would like to verify to determine whether test passes/fails
		1. Action: 
			a. getText : Input: Value to be verified on the control
			b. getOccurencesInTable : 
				Input :
					i.  Value to be searched in table in <SearchData> tag under context.
					ii. Number of expected ocurrences of that value in table in <expectedCount> tag under context.
					e.g.
					<context action="getOccurencesInTable" type="xpath" value="id('main-content')/div[2]/div/div/table/tbody/tr">
						<searchData>$336.21</searchData>
						<expectedCount>1</expectedCount>
					</context>
			c. ElementShouldNotExist : Element is deleted by any previous operations and expected to be not available.
					e.g. 
					<context action="ElementShouldNotExist" type="id" value="sctl00_txtSearchValue">Search Employee</context>
			d. Wait : A flexible wait time. Useful to wait for verification element to get populated(if required).
					Syntax:
					<context action="wait" type="" value="">5</context>	
		2. Corrective Steps: If you would like to perform further operation when the verification is passed.
			1.	Corrective Step
				1.	Events as mentioned above in 1.2.1
				2.	applicableWhen – The condition deciding when to take corrective action i.e. On existence of specific element on page. 


